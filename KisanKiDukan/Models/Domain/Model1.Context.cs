

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace KisanKiDukan.Models.Domain
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class DbEntities : DbContext
{
    public DbEntities()
        : base("name=DbEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<ADCategory> ADCategories { get; set; }

    public virtual DbSet<ADProduct> ADProducts { get; set; }

    public virtual DbSet<ADProductDetail> ADProductDetails { get; set; }

    public virtual DbSet<ADSubCategory> ADSubCategories { get; set; }

    public virtual DbSet<BannerImage> BannerImages { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<BlogComment> BlogComments { get; set; }

    public virtual DbSet<BlogMaster> BlogMasters { get; set; }

    public virtual DbSet<BusinessStatu> BusinessStatus { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CentralStore> CentralStores { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<ContentPage> ContentPages { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DeliveryChargeMaster> DeliveryChargeMasters { get; set; }

    public virtual DbSet<DeliveryLocation> DeliveryLocations { get; set; }

    public virtual DbSet<DeliveryOption> DeliveryOptions { get; set; }

    public virtual DbSet<DeliveryPincode> DeliveryPincodes { get; set; }

    public virtual DbSet<DeliveryTimeSlot> DeliveryTimeSlots { get; set; }

    public virtual DbSet<DownPyment> DownPyments { get; set; }

    public virtual DbSet<Enquiry> Enquiries { get; set; }

    public virtual DbSet<Kart> Karts { get; set; }

    public virtual DbSet<KartDetail> KartDetails { get; set; }

    public virtual DbSet<LoginMaster> LoginMasters { get; set; }

    public virtual DbSet<Membership> Memberships { get; set; }

    public virtual DbSet<Metric> Metrics { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderStatu> OrderStatus { get; set; }

    public virtual DbSet<OtherMultipaleImage> OtherMultipaleImages { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<premiumMembershipAmount> premiumMembershipAmounts { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Product_Availability> Product_Availability { get; set; }

    public virtual DbSet<Product_Image> Product_Image { get; set; }

    public virtual DbSet<ProductBrand> ProductBrands { get; set; }

    public virtual DbSet<ProductReview> ProductReviews { get; set; }

    public virtual DbSet<promotionalbanner> promotionalbanners { get; set; }

    public virtual DbSet<RefferalMember> RefferalMembers { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Store> Stores { get; set; }

    public virtual DbSet<SubCategory> SubCategories { get; set; }

    public virtual DbSet<VenderCity> VenderCities { get; set; }

    public virtual DbSet<VenderLocality> VenderLocalities { get; set; }

    public virtual DbSet<VenderState> VenderStates { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<Wallet> Wallets { get; set; }

    public virtual DbSet<DiscountInfo> DiscountInfoes { get; set; }

    public virtual DbSet<DiscountType> DiscountTypes { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<ShippingAddress> ShippingAddresses { get; set; }

    public virtual DbSet<VendorPincode> VendorPincodes { get; set; }

    public virtual DbSet<Bulkorder> Bulkorders { get; set; }

    public virtual DbSet<Discount_Coupon> Discount_Coupon { get; set; }


    public virtual ObjectResult<getCSExistProductBy_Result> getCSExistProductBy(Nullable<int> productId, Nullable<int> storeId, Nullable<int> wheight, Nullable<int> metricCode)
    {

        var productIdParameter = productId.HasValue ?
            new ObjectParameter("productId", productId) :
            new ObjectParameter("productId", typeof(int));


        var storeIdParameter = storeId.HasValue ?
            new ObjectParameter("storeId", storeId) :
            new ObjectParameter("storeId", typeof(int));


        var wheightParameter = wheight.HasValue ?
            new ObjectParameter("wheight", wheight) :
            new ObjectParameter("wheight", typeof(int));


        var metricCodeParameter = metricCode.HasValue ?
            new ObjectParameter("metricCode", metricCode) :
            new ObjectParameter("metricCode", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCSExistProductBy_Result>("getCSExistProductBy", productIdParameter, storeIdParameter, wheightParameter, metricCodeParameter);
    }


    public virtual ObjectResult<Nullable<int>> GETPRODUCTIDBYNAME(string productName)
    {

        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GETPRODUCTIDBYNAME", productNameParameter);
    }


    public virtual int UpdateVendorDetails(Nullable<decimal> commission, Nullable<decimal> paymentgatewayCharge, Nullable<decimal> deliveryCharge, Nullable<int> id)
    {

        var commissionParameter = commission.HasValue ?
            new ObjectParameter("commission", commission) :
            new ObjectParameter("commission", typeof(decimal));


        var paymentgatewayChargeParameter = paymentgatewayCharge.HasValue ?
            new ObjectParameter("paymentgatewayCharge", paymentgatewayCharge) :
            new ObjectParameter("paymentgatewayCharge", typeof(decimal));


        var deliveryChargeParameter = deliveryCharge.HasValue ?
            new ObjectParameter("DeliveryCharge", deliveryCharge) :
            new ObjectParameter("DeliveryCharge", typeof(decimal));


        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVendorDetails", commissionParameter, paymentgatewayChargeParameter, deliveryChargeParameter, idParameter);
    }

}

}

